package chess;

import AI.ComputerAI;
import Pieces.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;


public class Main extends javax.swing.JFrame {
    private static Square[][] displayBoard = new Square[8][8];    
    private static Square pieceToMove;    
    private static ComputerAI computer;
    private static MouseAdapter preSquareClickListener;
    private static MouseAdapter squareClickListener;    
    private static final Icon blackRook = new ImageIcon("images/black_rook.png");
    private static final Icon blackKnight = new ImageIcon("images/black_knight.png");
    private static final Icon blackBishop = new ImageIcon("images/black_bishop.png");
    private static final Icon blackKing = new ImageIcon("images/black_king.png");
    private static final Icon blackQueen = new ImageIcon("images/black_queen.png");
    private static final Icon blackPawn = new ImageIcon("images/black_pawn.png");
    private static final Icon whiteRook = new ImageIcon("images/white_rook.png");
    private static final Icon whiteKnight = new ImageIcon("images/white_knight.png");
    private static final Icon whiteBishop = new ImageIcon("images/white_bishop.png");
    private static final Icon whiteKing = new ImageIcon("images/white_king.png");
    private static final Icon whiteQueen = new ImageIcon("images/white_queen.png");
    private static final Icon whitePawn = new ImageIcon("images/white_pawn.png"); 
       
    public Board chessBoard;
    public static int playerSide = 0;
    public King playerKing;               
    
    /**
     * Creates new form Display
     */
    public Main() {
        initComponents();
        for(int i = 0; i < 8; i++){
            for(int j = 0; j < 8; j++){
                if((i + j)%2 == 0){
                    displayBoard[i][j] = new Square(null, new Color(255,255,204), new int[]{i, j});
                }
                else if((i + j)%2 == 1){
                    displayBoard[i][j] = new Square(null, new Color(102,102,0), new int[]{i, j});
                }
            }
        }

        for(Component comp: piecesPanel.getComponents()){
            ((JRadioButton) comp).setVisible(false);
        } 
        forfeitBtn.setVisible(false);
        whiteRadio.setSelected(true);
        
        squareClickListener = new MouseAdapter(){
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SquareClicked(evt);
            }
        };
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        boardPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        forfeitBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        controlsPanel = new javax.swing.JPanel();
        piecesPanel = new javax.swing.JPanel();
        blackBishopRadio = new javax.swing.JRadioButton();
        blackKnightRadio = new javax.swing.JRadioButton();
        blackRookRadio = new javax.swing.JRadioButton();
        blackQueenRadio = new javax.swing.JRadioButton();
        blackKingRadio = new javax.swing.JRadioButton();
        blackPawnRadio = new javax.swing.JRadioButton();
        whiteQueenRadio = new javax.swing.JRadioButton();
        whiteKingRadio = new javax.swing.JRadioButton();
        whitePawnRadio = new javax.swing.JRadioButton();
        whiteBishopRadio = new javax.swing.JRadioButton();
        whiteKnightRadio = new javax.swing.JRadioButton();
        whiteRookRadio = new javax.swing.JRadioButton();
        whiteRadio = new javax.swing.JRadioButton();
        blackRadio = new javax.swing.JRadioButton();
        startBtn = new javax.swing.JButton();
        standardRadio = new javax.swing.JRadioButton();
        customRadio = new javax.swing.JRadioButton();
        depthLbl = new javax.swing.JLabel();
        depthSlider = new javax.swing.JSlider();
        jLabel65 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 153, 153));

        boardPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        boardPanel.setLayout(new java.awt.GridLayout(0, 8));

        jLabel1.setBackground(new java.awt.Color(255, 255, 204));
        jLabel1.setOpaque(true);
        boardPanel.add(jLabel1);

        jLabel2.setBackground(new java.awt.Color(102, 102, 0));
        jLabel2.setOpaque(true);
        boardPanel.add(jLabel2);

        jLabel3.setBackground(new java.awt.Color(255, 255, 204));
        jLabel3.setOpaque(true);
        boardPanel.add(jLabel3);

        jLabel4.setBackground(new java.awt.Color(102, 102, 0));
        jLabel4.setOpaque(true);
        boardPanel.add(jLabel4);

        jLabel5.setBackground(new java.awt.Color(255, 255, 204));
        jLabel5.setOpaque(true);
        boardPanel.add(jLabel5);

        jLabel6.setBackground(new java.awt.Color(102, 102, 0));
        jLabel6.setOpaque(true);
        boardPanel.add(jLabel6);

        jLabel7.setBackground(new java.awt.Color(255, 255, 204));
        jLabel7.setOpaque(true);
        boardPanel.add(jLabel7);

        jLabel8.setBackground(new java.awt.Color(102, 102, 0));
        jLabel8.setOpaque(true);
        boardPanel.add(jLabel8);

        jLabel9.setBackground(new java.awt.Color(102, 102, 0));
        jLabel9.setOpaque(true);
        boardPanel.add(jLabel9);

        jLabel10.setBackground(new java.awt.Color(255, 255, 204));
        jLabel10.setOpaque(true);
        boardPanel.add(jLabel10);

        jLabel11.setBackground(new java.awt.Color(102, 102, 0));
        jLabel11.setOpaque(true);
        boardPanel.add(jLabel11);

        jLabel12.setBackground(new java.awt.Color(255, 255, 204));
        jLabel12.setOpaque(true);
        boardPanel.add(jLabel12);

        jLabel13.setBackground(new java.awt.Color(102, 102, 0));
        jLabel13.setOpaque(true);
        boardPanel.add(jLabel13);

        jLabel14.setBackground(new java.awt.Color(255, 255, 204));
        jLabel14.setOpaque(true);
        boardPanel.add(jLabel14);

        jLabel15.setBackground(new java.awt.Color(102, 102, 0));
        jLabel15.setOpaque(true);
        boardPanel.add(jLabel15);

        jLabel16.setBackground(new java.awt.Color(255, 255, 204));
        jLabel16.setOpaque(true);
        boardPanel.add(jLabel16);

        jLabel17.setBackground(new java.awt.Color(255, 255, 204));
        jLabel17.setOpaque(true);
        boardPanel.add(jLabel17);

        jLabel18.setBackground(new java.awt.Color(102, 102, 0));
        jLabel18.setOpaque(true);
        boardPanel.add(jLabel18);

        jLabel19.setBackground(new java.awt.Color(255, 255, 204));
        jLabel19.setOpaque(true);
        boardPanel.add(jLabel19);

        jLabel20.setBackground(new java.awt.Color(102, 102, 0));
        jLabel20.setOpaque(true);
        boardPanel.add(jLabel20);

        jLabel21.setBackground(new java.awt.Color(255, 255, 204));
        jLabel21.setOpaque(true);
        boardPanel.add(jLabel21);

        jLabel22.setBackground(new java.awt.Color(102, 102, 0));
        jLabel22.setOpaque(true);
        boardPanel.add(jLabel22);

        jLabel23.setBackground(new java.awt.Color(255, 255, 204));
        jLabel23.setOpaque(true);
        boardPanel.add(jLabel23);

        jLabel24.setBackground(new java.awt.Color(102, 102, 0));
        jLabel24.setOpaque(true);
        boardPanel.add(jLabel24);

        jLabel25.setBackground(new java.awt.Color(102, 102, 0));
        jLabel25.setOpaque(true);
        boardPanel.add(jLabel25);

        jLabel26.setBackground(new java.awt.Color(255, 255, 204));
        jLabel26.setOpaque(true);
        boardPanel.add(jLabel26);

        jLabel27.setBackground(new java.awt.Color(102, 102, 0));
        jLabel27.setOpaque(true);
        boardPanel.add(jLabel27);

        jLabel28.setBackground(new java.awt.Color(255, 255, 204));
        jLabel28.setOpaque(true);
        boardPanel.add(jLabel28);

        jLabel29.setBackground(new java.awt.Color(102, 102, 0));
        jLabel29.setOpaque(true);
        boardPanel.add(jLabel29);

        jLabel30.setBackground(new java.awt.Color(255, 255, 204));
        jLabel30.setOpaque(true);
        boardPanel.add(jLabel30);

        jLabel31.setBackground(new java.awt.Color(102, 102, 0));
        jLabel31.setOpaque(true);
        boardPanel.add(jLabel31);

        jLabel32.setBackground(new java.awt.Color(255, 255, 204));
        jLabel32.setOpaque(true);
        boardPanel.add(jLabel32);

        jLabel33.setBackground(new java.awt.Color(255, 255, 204));
        jLabel33.setOpaque(true);
        boardPanel.add(jLabel33);

        jLabel34.setBackground(new java.awt.Color(102, 102, 0));
        jLabel34.setOpaque(true);
        boardPanel.add(jLabel34);

        jLabel35.setBackground(new java.awt.Color(255, 255, 204));
        jLabel35.setOpaque(true);
        boardPanel.add(jLabel35);

        jLabel36.setBackground(new java.awt.Color(102, 102, 0));
        jLabel36.setOpaque(true);
        boardPanel.add(jLabel36);

        jLabel37.setBackground(new java.awt.Color(255, 255, 204));
        jLabel37.setOpaque(true);
        boardPanel.add(jLabel37);

        jLabel38.setBackground(new java.awt.Color(102, 102, 0));
        jLabel38.setOpaque(true);
        boardPanel.add(jLabel38);

        jLabel39.setBackground(new java.awt.Color(255, 255, 204));
        jLabel39.setOpaque(true);
        boardPanel.add(jLabel39);

        jLabel40.setBackground(new java.awt.Color(102, 102, 0));
        jLabel40.setOpaque(true);
        boardPanel.add(jLabel40);

        jLabel41.setBackground(new java.awt.Color(102, 102, 0));
        jLabel41.setOpaque(true);
        boardPanel.add(jLabel41);

        jLabel42.setBackground(new java.awt.Color(255, 255, 204));
        jLabel42.setOpaque(true);
        boardPanel.add(jLabel42);

        jLabel43.setBackground(new java.awt.Color(102, 102, 0));
        jLabel43.setOpaque(true);
        boardPanel.add(jLabel43);

        jLabel44.setBackground(new java.awt.Color(255, 255, 204));
        jLabel44.setOpaque(true);
        boardPanel.add(jLabel44);

        jLabel45.setBackground(new java.awt.Color(102, 102, 0));
        jLabel45.setOpaque(true);
        boardPanel.add(jLabel45);

        jLabel46.setBackground(new java.awt.Color(255, 255, 204));
        jLabel46.setOpaque(true);
        boardPanel.add(jLabel46);

        jLabel47.setBackground(new java.awt.Color(102, 102, 0));
        jLabel47.setOpaque(true);
        boardPanel.add(jLabel47);

        jLabel48.setBackground(new java.awt.Color(255, 255, 204));
        jLabel48.setOpaque(true);
        boardPanel.add(jLabel48);

        jLabel49.setBackground(new java.awt.Color(255, 255, 204));
        jLabel49.setOpaque(true);
        boardPanel.add(jLabel49);

        jLabel50.setBackground(new java.awt.Color(102, 102, 0));
        jLabel50.setOpaque(true);
        boardPanel.add(jLabel50);

        jLabel51.setBackground(new java.awt.Color(255, 255, 204));
        jLabel51.setOpaque(true);
        boardPanel.add(jLabel51);

        jLabel52.setBackground(new java.awt.Color(102, 102, 0));
        jLabel52.setOpaque(true);
        boardPanel.add(jLabel52);

        jLabel53.setBackground(new java.awt.Color(255, 255, 204));
        jLabel53.setOpaque(true);
        boardPanel.add(jLabel53);

        jLabel54.setBackground(new java.awt.Color(102, 102, 0));
        jLabel54.setOpaque(true);
        boardPanel.add(jLabel54);

        jLabel55.setBackground(new java.awt.Color(255, 255, 204));
        jLabel55.setOpaque(true);
        boardPanel.add(jLabel55);

        jLabel56.setBackground(new java.awt.Color(102, 102, 0));
        jLabel56.setOpaque(true);
        boardPanel.add(jLabel56);

        jLabel57.setBackground(new java.awt.Color(102, 102, 0));
        jLabel57.setOpaque(true);
        boardPanel.add(jLabel57);

        jLabel58.setBackground(new java.awt.Color(255, 255, 204));
        jLabel58.setOpaque(true);
        boardPanel.add(jLabel58);

        jLabel59.setBackground(new java.awt.Color(102, 102, 0));
        jLabel59.setOpaque(true);
        boardPanel.add(jLabel59);

        jLabel60.setBackground(new java.awt.Color(255, 255, 204));
        jLabel60.setOpaque(true);
        boardPanel.add(jLabel60);

        jLabel61.setBackground(new java.awt.Color(102, 102, 0));
        jLabel61.setOpaque(true);
        boardPanel.add(jLabel61);

        jLabel62.setBackground(new java.awt.Color(255, 255, 204));
        jLabel62.setOpaque(true);
        boardPanel.add(jLabel62);

        jLabel63.setBackground(new java.awt.Color(102, 102, 0));
        jLabel63.setOpaque(true);
        boardPanel.add(jLabel63);

        jLabel64.setBackground(new java.awt.Color(255, 255, 204));
        jLabel64.setOpaque(true);
        boardPanel.add(jLabel64);

        forfeitBtn.setText("Forfeit");
        forfeitBtn.setActionCommand("forfeitBtn");
        forfeitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forfeitBtnActionPerformed(evt);
            }
        });

        clearBtn.setText("Clear Board");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        buttonGroup3.add(blackBishopRadio);
        blackBishopRadio.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc-user\\Documents\\NetBeansProjects\\Chess\\images\\black_bishop.png")); // NOI18N
        blackBishopRadio.setName("blackBishopBtn"); // NOI18N

        buttonGroup3.add(blackKnightRadio);
        blackKnightRadio.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc-user\\Documents\\NetBeansProjects\\Chess\\images\\black_knight.png")); // NOI18N

        buttonGroup3.add(blackRookRadio);
        blackRookRadio.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc-user\\Documents\\NetBeansProjects\\Chess\\images\\black_rook.png")); // NOI18N

        buttonGroup3.add(blackQueenRadio);
        blackQueenRadio.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc-user\\Documents\\NetBeansProjects\\Chess\\images\\black_queen.png")); // NOI18N

        buttonGroup3.add(blackKingRadio);
        blackKingRadio.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc-user\\Documents\\NetBeansProjects\\Chess\\images\\black_king.png")); // NOI18N

        buttonGroup3.add(blackPawnRadio);
        blackPawnRadio.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc-user\\Documents\\NetBeansProjects\\Chess\\images\\black_pawn.png")); // NOI18N

        buttonGroup3.add(whiteQueenRadio);
        whiteQueenRadio.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc-user\\Documents\\NetBeansProjects\\Chess\\images\\white_queen.png")); // NOI18N

        buttonGroup3.add(whiteKingRadio);
        whiteKingRadio.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc-user\\Documents\\NetBeansProjects\\Chess\\images\\white_king.png")); // NOI18N

        buttonGroup3.add(whitePawnRadio);
        whitePawnRadio.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc-user\\Documents\\NetBeansProjects\\Chess\\images\\white_pawn.png")); // NOI18N

        buttonGroup3.add(whiteBishopRadio);
        whiteBishopRadio.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc-user\\Documents\\NetBeansProjects\\Chess\\images\\white_bishop.png")); // NOI18N

        buttonGroup3.add(whiteKnightRadio);
        whiteKnightRadio.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc-user\\Documents\\NetBeansProjects\\Chess\\images\\white_knight.png")); // NOI18N

        buttonGroup3.add(whiteRookRadio);
        whiteRookRadio.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc-user\\Documents\\NetBeansProjects\\Chess\\images\\white_rook.png")); // NOI18N

        javax.swing.GroupLayout piecesPanelLayout = new javax.swing.GroupLayout(piecesPanel);
        piecesPanel.setLayout(piecesPanelLayout);
        piecesPanelLayout.setHorizontalGroup(
            piecesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(piecesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(piecesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(piecesPanelLayout.createSequentialGroup()
                        .addGroup(piecesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(blackBishopRadio)
                            .addComponent(blackQueenRadio)
                            .addComponent(whiteQueenRadio))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(piecesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(piecesPanelLayout.createSequentialGroup()
                                .addGroup(piecesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(piecesPanelLayout.createSequentialGroup()
                                        .addComponent(blackKnightRadio)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(blackRookRadio)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(piecesPanelLayout.createSequentialGroup()
                                        .addComponent(blackKingRadio)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(blackPawnRadio)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(piecesPanelLayout.createSequentialGroup()
                                .addGroup(piecesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(whiteRookRadio)
                                    .addGroup(piecesPanelLayout.createSequentialGroup()
                                        .addComponent(whiteKingRadio)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(whitePawnRadio)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(piecesPanelLayout.createSequentialGroup()
                        .addComponent(whiteBishopRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(whiteKnightRadio)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        piecesPanelLayout.setVerticalGroup(
            piecesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(piecesPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(piecesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(blackBishopRadio)
                    .addComponent(blackKnightRadio)
                    .addComponent(blackRookRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(piecesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(piecesPanelLayout.createSequentialGroup()
                        .addComponent(blackPawnRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(whitePawnRadio))
                    .addGroup(piecesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(piecesPanelLayout.createSequentialGroup()
                            .addComponent(blackKingRadio)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(whiteKingRadio))
                        .addGroup(piecesPanelLayout.createSequentialGroup()
                            .addComponent(blackQueenRadio)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(whiteQueenRadio))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(piecesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(whiteKnightRadio)
                    .addComponent(whiteBishopRadio)
                    .addComponent(whiteRookRadio)))
        );

        buttonGroup2.add(whiteRadio);
        whiteRadio.setText("Play as White");
        whiteRadio.setActionCommand("whiteBtn");
        whiteRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteRadioActionPerformed(evt);
            }
        });

        buttonGroup2.add(blackRadio);
        blackRadio.setText("Play as Black");
        blackRadio.setActionCommand("blackBtn");
        blackRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackRadioActionPerformed(evt);
            }
        });

        startBtn.setText("Start Game");
        startBtn.setActionCommand("startBtn");
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        buttonGroup1.add(standardRadio);
        standardRadio.setText("Standard");
        standardRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standardRadioActionPerformed(evt);
            }
        });

        buttonGroup1.add(customRadio);
        customRadio.setText("Custom");
        customRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customRadioActionPerformed(evt);
            }
        });

        depthLbl.setText("Select depth of search:");

        depthSlider.setMaximum(4);
        depthSlider.setMinimum(1);
        depthSlider.setValue(3);

        jLabel65.setText("1 ply");

        jLabel68.setText("4 ply");

        jLabel66.setText("2 ply");

        jLabel67.setText("3 ply");

        javax.swing.GroupLayout controlsPanelLayout = new javax.swing.GroupLayout(controlsPanel);
        controlsPanel.setLayout(controlsPanelLayout);
        controlsPanelLayout.setHorizontalGroup(
            controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlsPanelLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlsPanelLayout.createSequentialGroup()
                        .addComponent(piecesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlsPanelLayout.createSequentialGroup()
                        .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(standardRadio)
                            .addComponent(customRadio))
                        .addGap(88, 88, 88))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel65)
                        .addGap(18, 18, 18)
                        .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startBtn)
                            .addComponent(blackRadio)
                            .addGroup(controlsPanelLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabel66)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel67)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel68))
                            .addComponent(whiteRadio))
                        .addGap(52, 52, 52))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlsPanelLayout.createSequentialGroup()
                        .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(depthLbl)
                            .addComponent(depthSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(52, 52, 52))))
        );
        controlsPanelLayout.setVerticalGroup(
            controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlsPanelLayout.createSequentialGroup()
                .addComponent(standardRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(piecesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(depthLbl)
                .addGap(3, 3, 3)
                .addComponent(depthSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlsPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel68)
                            .addComponent(jLabel67))
                        .addGap(36, 36, 36)
                        .addComponent(whiteRadio))
                    .addGroup(controlsPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel65)
                            .addComponent(jLabel66))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blackRadio)
                .addGap(21, 21, 21)
                .addComponent(startBtn))
        );

        standardRadio.getAccessibleContext().setAccessibleName("standardBtn");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(clearBtn)
                            .addComponent(boardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(forfeitBtn)
                        .addGap(215, 215, 215)))
                .addComponent(controlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(clearBtn)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(boardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(forfeitBtn))
                    .addComponent(controlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   public void UpdateDisplay(){
        ArrayList<Piece> updatedCompPieces = new ArrayList();
        
        for(int i = 0; i < 8; i++){
            for(int j = 0; j < 8; j++){       
                displayBoard[i][j].piece = chessBoard.getPieceOnSquare(i, j);
                
                int x = 59 * j + 4;
                int y = 59 * i + 4;
                JLabel square = (JLabel)boardPanel.getComponentAt(x, y);
   
                if(displayBoard[i][j].piece == null){
                    square.setIcon(null);
                }
                else{
                    switch(displayBoard[i][j].piece.getPieceName()){
                        case "rook": 
                            switch(displayBoard[i][j].piece.getColour()){
                                case 0: 
                                    square.setIcon(whiteRook);
                                    break;
                                case 1:   
                                    square.setIcon(blackRook);
                                    break;
                            }
                            break;
                        case "knight":
                            switch(displayBoard[i][j].piece.getColour()){
                                case 0: 
                                    square.setIcon(whiteKnight);
                                    break;
                                case 1:   
                                    square.setIcon(blackKnight);
                                    break;
                            }
                            break;
                        case "bishop":
                            switch(displayBoard[i][j].piece.getColour()){
                                case 0: 
                                    square.setIcon(whiteBishop);
                                    break;
                                case 1:   
                                    square.setIcon(blackBishop);
                                    break;
                            }
                            break;
                        case "king":
                            switch(displayBoard[i][j].piece.getColour()){
                                case 0: 
                                    square.setIcon(whiteKing);
                                    break;
                                case 1:   
                                    square.setIcon(blackKing);
                                    break;
                            }
                            break;
                        case "queen":
                            switch(displayBoard[i][j].piece.getColour()){
                                case 0: 
                                    square.setIcon(whiteQueen);
                                    break;
                                case 1:   
                                    square.setIcon(blackQueen);
                                    break;
                            }
                            break;
                        case "pawn":
                            switch(displayBoard[i][j].piece.getColour()){
                                case 0: 
                                    square.setIcon(whitePawn);
                                    break;
                                case 1:   
                                    square.setIcon(blackPawn);
                                    break;
                            }
                            break;
                    }
                }
                
                Piece piece = this.chessBoard.getPieceOnSquare(i, j);
                if(piece != null){                    
                    piece.setPos(i, j);
                    if(piece.getColour() != this.playerSide){
                        updatedCompPieces.add(piece);
                    }
                }
            }
        }
        
        computer.updateComputerPieces(updatedCompPieces);
    }    
    
    public void PromotePiece(Piece pawn){
        String[] options = new String[]{"Queen","Bishop","Knight","Rook"};
        int response = JOptionPane.showOptionDialog(boardPanel, "Choose a piece to promote your pawn to: ", "Promotion", 
                JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, null);
        
        int[] newPos = pawn.getPos();
        int x = 59 * newPos[1] + 4;
        int y = 59 * newPos[0] + 4;
        JLabel square = (JLabel)boardPanel.getComponentAt(x, y);
        
        if(response == 0){
            Piece promotedPiece = new Queen(pawn.getColour(), newPos, true);
            promotedPiece.setSquareTableValues();
            chessBoard.setPieceOnSquare(promotedPiece, newPos[0], newPos[1]);
            displayBoard[newPos[0]][newPos[1]].piece = promotedPiece;
            if(playerSide == 0){
                square.setIcon(whiteQueen);
            }
            else{
                square.setIcon(blackQueen);
            }
        }
        else if(response == 1){
            Piece promotedPiece = new Bishop(pawn.getColour(), newPos, true);
            promotedPiece.setSquareTableValues();
            chessBoard.setPieceOnSquare(promotedPiece, newPos[0], newPos[1]);
            displayBoard[newPos[0]][newPos[1]].piece = promotedPiece;
            if(playerSide == 0){
                square.setIcon(whiteBishop);
            }
            else{
                square.setIcon(blackBishop);
            }
        }
        else if(response == 2){
            Piece promotedPiece = new Knight(pawn.getColour(), newPos, true);
            promotedPiece.setSquareTableValues();
            chessBoard.setPieceOnSquare(promotedPiece, newPos[0], newPos[1]);
            displayBoard[newPos[0]][newPos[1]].piece = promotedPiece;
            if(playerSide == 0){
                square.setIcon(whiteKnight);
            }
            else{
                square.setIcon(blackKnight);
            }
        }
        else{
            Piece promotedPiece = new Rook(pawn.getColour(), newPos, true);
            promotedPiece.setSquareTableValues();
            chessBoard.setPieceOnSquare(promotedPiece, newPos[0], newPos[1]);
            displayBoard[newPos[0]][newPos[1]].piece = promotedPiece;
            if(playerSide == 0){
                square.setIcon(whiteRook);
            }
            else{
                square.setIcon(blackRook);
            }
        }  
    }
    
    public void endGame(){
        if(chessBoard.playerWin == false && chessBoard.compWin == true){
            JOptionPane.showMessageDialog(boardPanel, "You lose :( \n Press ok to return to the main menu", "Loss", HEIGHT);
        }
        else if(chessBoard.playerWin == true && chessBoard.compWin == false){
            JOptionPane.showMessageDialog(boardPanel, "You win :) \n Press ok to return to the main menu", "Win", HEIGHT);      
        }
        else{
            JOptionPane.showMessageDialog(boardPanel, "It's a draw. \n Press ok to return to the main menu", "Draw", HEIGHT);
        }
        
        clearBoard();
        for(Component comp: controlsPanel.getComponents()){
            comp.setVisible(true);
        }
        clearBtn.setVisible(true);
        this.setSize(813, 600); 
        forfeitBtn.setVisible(false);
        
        for(Component comp: boardPanel.getComponents()){
            JLabel label = (JLabel)comp;
            label.removeMouseListener(squareClickListener);
        }        
        
    }
    
    private void clearBoard(){
        for(int i = 0; i < 8; i++){
            for(int j = 0; j < 8; j++){
                displayBoard[i][j].piece = null;
                int x = 59 * j + 4;
                int y = 59 * i + 4;
                JLabel square = (JLabel)boardPanel.getComponentAt(x, y);
                square.setIcon(null);                
                square.setBackground(displayBoard[i][j].colorOfSquare);
                square.setBorder(null);
                displayBoard[i][j].litUp = false;                
            }
        }
        

    }
    
    private void PreGameSquareClicked(java.awt.event.MouseEvent evt){
        JLabel squareClicked = (JLabel)evt.getComponent();
        if(squareClicked.getIcon() != null){
            squareClicked.setIcon(null);
            int col = (squareClicked.getLocation().x - 4)/59;
            int row = (squareClicked.getLocation().y - 4)/59;
            displayBoard[row][col].piece = null;
        }
        else{        
            if(blackBishopRadio.isSelected()){
                squareClicked.setIcon(blackBishop);
                int col = (squareClicked.getLocation().x - 4)/59;
                int row = (squareClicked.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Bishop(1, new int[]{row, col}, false);
            }
            else if(blackKnightRadio.isSelected()){
                squareClicked.setIcon(blackKnight);
                int col = (squareClicked.getLocation().x - 4)/59;
                int row = (squareClicked.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Knight(1, new int[]{row, col}, false);
            }
            else if(blackRookRadio.isSelected()){
                squareClicked.setIcon(blackRook);
                int col = (squareClicked.getLocation().x - 4)/59;
                int row = (squareClicked.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Rook(1, new int[]{row, col}, false);
            }
            else if(blackKingRadio.isSelected()){
                squareClicked.setIcon(blackKing);
                int col = (squareClicked.getLocation().x - 4)/59;
                int row = (squareClicked.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new King(1, new int[]{row, col});
            }
            else if(blackQueenRadio.isSelected()){
                squareClicked.setIcon(blackQueen);
                int col = (squareClicked.getLocation().x - 4)/59;
                int row = (squareClicked.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Queen(1, new int[]{row, col}, false);
            }
            else if(blackPawnRadio.isSelected()){
                squareClicked.setIcon(blackPawn);
                int col = (squareClicked.getLocation().x - 4)/59;
                int row = (squareClicked.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Pawn(1, new int[]{row, col});
            }
            else if(whiteBishopRadio.isSelected()){
                squareClicked.setIcon(whiteBishop);
                int col = (squareClicked.getLocation().x - 4)/59;
                int row = (squareClicked.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Bishop(0, new int[]{row, col}, false);
            }
            else if(whiteKnightRadio.isSelected()){
                squareClicked.setIcon(whiteKnight);
                int col = (squareClicked.getLocation().x - 4)/59;
                int row = (squareClicked.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Knight(0, new int[]{row, col}, false);
            }
            else if(whiteRookRadio.isSelected()){
                squareClicked.setIcon(whiteRook);
                int col = (squareClicked.getLocation().x - 4)/59;
                int row = (squareClicked.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Rook(0, new int[]{row, col}, false);
            }
            else if(whiteKingRadio.isSelected()){
                squareClicked.setIcon(whiteKing);
                int col = (squareClicked.getLocation().x - 4)/59;
                int row = (squareClicked.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new King(0, new int[]{row, col});
            }
            else if(whiteQueenRadio.isSelected()){
                squareClicked.setIcon(whiteQueen);
                int col = (squareClicked.getLocation().x - 4)/59;
                int row = (squareClicked.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Queen(0, new int[]{row, col}, false);
            }
            else if(whitePawnRadio.isSelected()){
                squareClicked.setIcon(whitePawn);
                int col = (squareClicked.getLocation().x - 4)/59;
                int row = (squareClicked.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Pawn(0, new int[]{row, col});
            }
        }        
    }    
    
    private void SquareClicked(java.awt.event.MouseEvent evt){
        
        if(chessBoard.sideToMove == playerSide){
            JLabel clickedSquare = (JLabel)evt.getComponent();
            int row = (clickedSquare.getLocation().y - 4)/59;
            int col = (clickedSquare.getLocation().x - 4)/59;            

            if(pieceToMove == null && displayBoard[row][col].piece != null && 
                    displayBoard[row][col].piece.getColour() == playerSide){
                clickedSquare.setBackground(Color.GREEN);
                clickedSquare.setBorder(new LineBorder(Color.BLACK));
                displayBoard[row][col].litUp = true;
                Piece piece = displayBoard[row][col].piece;

                for(Object obj: piece.getAllMoves(chessBoard, false)){                    
                    Integer[] move = (Integer[]) obj;
                    Piece pieceToCapture = chessBoard.getPieceOnSquare(move[0], move[1]);
                    chessBoard.setPieceOnSquare(piece, move[0], move[1]);
                    chessBoard.setPieceOnSquare(null, row, col);
                    piece.setPos(move[0], move[1]);
                    
                    if(!playerKing.isThreatened(chessBoard)){
                        displayBoard[move[0]][move[1]].litUp = true;
                        lightUpSquare(move[0], move[1]);                    
                    }
                    
                    chessBoard.setPieceOnSquare(pieceToCapture, move[0], move[1]);
                    chessBoard.setPieceOnSquare(piece, row, col); 
                    piece.setPos(row, col);                      
                }                             
                
                if(piece.getPieceName().equals("king")){
                    ArrayList<Piece> castlingRooks = chessBoard.getRooksToCastleWith(piece);
                    for(Piece rook: castlingRooks){
                        int[] rookPos = rook.getPos();
                        displayBoard[rookPos[0]][rookPos[1]].litUp = true;
                        lightUpSquare(rookPos[0], rookPos[1]);
                    }
                }
                
                if(chessBoard.enPassentablePawn != null && piece.getPieceName().equals("pawn") && chessBoard.enPassentablePawn.getPos()[0] == piece.getPos()[0] &&
                        (chessBoard.enPassentablePawn.getPos()[1] == piece.getPos()[1] + 1 || chessBoard.enPassentablePawn.getPos()[1] == piece.getPos()[1] - 1)){
                    int[] pawnPos = chessBoard.enPassentablePawn.getPos();
                    displayBoard[pawnPos[0]][pawnPos[1]].litUp = true;
                    lightUpSquare(pawnPos[0], pawnPos[1]);
                }
                
                pieceToMove = displayBoard[row][col];
            }
            else{
                //moves the piece to the square selected
                if(pieceToMove != null && pieceToMove != displayBoard[row][col] && displayBoard[row][col].litUp){
                    Piece piece = displayBoard[row][col].piece;
                    if(piece != null && piece.getPieceName().equals("rook") && piece.getColour() == playerSide){
                        chessBoard.Castle(pieceToMove.piece, piece);
                        chessBoard.DoPieceMovedOperations(pieceToMove.piece);
                        chessBoard.DoPieceMovedOperations(piece);
                        UpdateDisplay();                        
                    }
                    else if(chessBoard.enPassentablePawn != null && piece != null && piece == chessBoard.enPassentablePawn &&
                            pieceToMove.piece.getPieceName().equals("pawn") && pieceToMove.piece.getPos()[0] == piece.getPos()[0]){
                        chessBoard.enPassent(pieceToMove.piece);
                        chessBoard.DoPieceMovedOperations(pieceToMove.piece);
                        UpdateDisplay();
                    }
                    else{
                        int x = pieceToMove.pos[1] * 59 + 4;
                        int y = pieceToMove.pos[0] * 59 + 4;
                        JLabel oldSquare = (JLabel)boardPanel.getComponentAt(x, y);                         
                        
                        computer.removePieceFromMemory(piece);
                        clickedSquare.setIcon(oldSquare.getIcon()); 
                        //UpdateDisplay(pieceToMove.piece, new int[]{pieceToMove.pos[0], pieceToMove.pos[1]}, new int[]{row, col});
                        piece = pieceToMove.piece;
                        piece.setPos(row, col);
                        chessBoard.setPieceOnSquare(pieceToMove.piece, row, col);                                                 
                        
                        oldSquare.setIcon(null); 
                        displayBoard[pieceToMove.pos[0]][pieceToMove.pos[1]].piece = null;  
                        chessBoard.setPieceOnSquare(null, pieceToMove.pos[0], pieceToMove.pos[1]);                  
                        
                        chessBoard.DoPieceMovedOperations(piece);   
                    }

                    chessBoard.enPassentablePawn = null;
                    //System.out.println(((Pawn)piece).movesDone + " " + piece.getPos()[0] + " " + piece.getPos()[1] + " " +  " " +  pieceToMove.pos[0] + " " + pieceToMove.pos[1]);
                    if(piece.getPieceName().equals("pawn") && ((Pawn)piece).movesDone == 1 && piece.getColour() == playerSide &&
                            (piece.getPos()[0] == pieceToMove.pos[0] - 2 || piece.getPos()[0] == pieceToMove.pos[0] + 2)){
                        chessBoard.enPassentablePawn = piece;
                    }
                    chessBoard.sideToMove = 1 - chessBoard.sideToMove;
                }

                //de-highlights any squares that were highlighted
                for(int i = 0; i < displayBoard.length; i++){
                    for(int j = 0; j < displayBoard.length; j++){
                        int x = 59 * j + 4;
                        int y = 59 * i + 4;
                        JLabel square = (JLabel)boardPanel.getComponentAt(x, y);
                        square.setBackground(displayBoard[i][j].colorOfSquare);
                        square.setBorder(null);
                        displayBoard[i][j].litUp = false;
                        
                    }                
                }
                pieceToMove = null;
            }
            
        }       
    }
    
    public void lightUpSquare(int row, int col){
        Piece piece = displayBoard[row][col].piece;
        //lights up the square at location (x, y)
        
        int x = 59 * col + 4;
        int y = 59 * row + 4;
        JLabel square =  ((JLabel)boardPanel.getComponentAt(x, y));
        if(piece == null || piece.getColour() == chessBoard.sideToMove){
            square.setBackground(Color.GREEN);
        }
        else if(piece.getColour() != chessBoard.sideToMove){
            square.setBackground(Color.RED);
        }
        square.setBorder(new LineBorder(Color.BLACK));   
    }
  
   
    private void forfeitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forfeitBtnActionPerformed
        // TODO add your handling code here:
        //de-highlights any squares that were highlighted        
        chessBoard.compWin = true;
        chessBoard.playerWin = false;
        computer.end = true;
    }//GEN-LAST:event_forfeitBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // TODO add your handling code here:
        clearBoard();
    }//GEN-LAST:event_clearBtnActionPerformed

    private void customRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customRadioActionPerformed
        // TODO add your handling code here:
        clearBoard();

        for(Component comp: piecesPanel.getComponents()){
            ((JRadioButton) comp).setVisible(true);
        }

        preSquareClickListener = new MouseAdapter(){
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PreGameSquareClicked(evt);
            }
        };

        for(Component comp: boardPanel.getComponents()){
            JLabel label = (JLabel)comp;
            //label.removeMouseListener(squareClickListener);
            label.addMouseListener(preSquareClickListener);
        }
    }//GEN-LAST:event_customRadioActionPerformed

    private void standardRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standardRadioActionPerformed
        // TODO add your handling code here:
        clearBoard();

        for(Component comp: boardPanel.getComponents()){
            JLabel label = (JLabel) comp;
            label.removeMouseListener(preSquareClickListener);
            
            if((playerSide == 0 && label.getLocation().y == (59 * 1 + 4)) || (playerSide == 1 && label.getLocation().y == (59 * 6 + 4))){
                label.setIcon(blackPawn);
                int col = (label.getLocation().x - 4)/59;
                int row = (label.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Pawn(1, new int[]{row, col});
            }
            else if(((playerSide == 0 && label.getLocation().y == (4)) ||  (playerSide == 1 && label.getLocation().y == (59 * 7 + 4))) && 
                        (label.getLocation().x == (4) || label.getLocation().x == (59 * 7 + 4))){
                label.setIcon(blackRook);
                int col = (label.getLocation().x - 4)/59;
                int row = (label.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Rook(1, new int[]{row, col}, false);
            }
            else if(((playerSide == 0 && label.getLocation().y == (4)) ||  (playerSide == 1 && label.getLocation().y == (59 * 7 + 4))) && 
                        (label.getLocation().x == (59 * 1 + 4) || label.getLocation().x == (59 * 6 + 4))){
                label.setIcon(blackKnight);
                int col = (label.getLocation().x - 4)/59;
                int row = (label.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Knight(1, new int[]{row, col}, false);
            }
            else if(((playerSide == 0 && label.getLocation().y == (4)) ||  (playerSide == 1 && label.getLocation().y == (59 * 7 + 4))) && 
                        (label.getLocation().x == (59 * 2 + 4) || label.getLocation().x == (59 * 5 + 4))){
                label.setIcon(blackBishop);
                int col = (label.getLocation().x - 4)/59;
                int row = (label.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Bishop(1, new int[]{row, col}, false);
            }
            else if((playerSide == 0 && label.getLocation().y == (4) && label.getLocation().x == (59 * 4 + 4)) 
                    || (playerSide == 1 && label.getLocation().y == (59 * 7 + 4) &&  label.getLocation().x == (59 * 3 + 4))){
                label.setIcon(blackKing);
                int col = (label.getLocation().x - 4)/59;
                int row = (label.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new King(1, new int[]{row, col});
            }
            else if((playerSide == 0 && label.getLocation().y == (4) && label.getLocation().x == (59 * 3 + 4)) 
                    || (playerSide == 1 && label.getLocation().y == (59 * 7 + 4) && label.getLocation().x == (59 * 4 + 4))){
                label.setIcon(blackQueen);
                int col = (label.getLocation().x - 4)/59;
                int row = (label.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Queen(1, new int[]{row, col}, false);
            }
            //display all white pieces
            else if((playerSide == 0 && label.getLocation().y == (59 * 6 + 4)) || (playerSide == 1 && label.getLocation().y == (59 * 1 + 4))){
                label.setIcon(whitePawn);
                int col = (label.getLocation().x - 4)/59;
                int row = (label.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Pawn(0, new int[]{row, col});
            }
            else if(((playerSide == 0 && label.getLocation().y == (59 * 7 + 4)) || (playerSide == 1 && label.getLocation().y == (4))) && 
                        (label.getLocation().x == (4) || label.getLocation().x == (59 * 7 + 4))){
                label.setIcon(whiteRook);
                int col = (label.getLocation().x - 4)/59;
                int row = (label.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Rook(0, new int[]{row, col}, false);
            }
            else if(((playerSide == 0 && label.getLocation().y == (59 * 7 + 4)) || (playerSide == 1 && label.getLocation().y == (4))) && 
                        (label.getLocation().x == (59 * 1 + 4) || label.getLocation().x == (59 * 6 + 4))){
                label.setIcon(whiteKnight);
                int col = (label.getLocation().x - 4)/59;
                int row = (label.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Knight(0, new int[]{row, col}, false);
            }
            else if(((playerSide == 0 && label.getLocation().y == (59 * 7 + 4)) || (playerSide == 1 && label.getLocation().y == (4))) && 
                        (label.getLocation().x == (59 * 2 + 4) || label.getLocation().x == (59 * 5 + 4))){
                label.setIcon(whiteBishop);
                int col = (label.getLocation().x - 4)/59;
                int row = (label.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Bishop(0, new int[]{row, col}, false);
            }
            else if((playerSide == 0 && label.getLocation().y == (59 * 7 + 4) && label.getLocation().x == (59 * 4 + 4)) 
                    || (playerSide == 1 && label.getLocation().y == (4) && label.getLocation().x == (59 * 3 + 4))){
                label.setIcon(whiteKing);
                int col = (label.getLocation().x - 4)/59;
                int row = (label.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new King(0, new int[]{row, col});
            }
            else if((playerSide == 0 && label.getLocation().y == (59 * 7 + 4) && label.getLocation().x == (59 * 3 + 4)) 
                    || (playerSide == 1 && label.getLocation().y == (4) && label.getLocation().x == (59 * 4 + 4))){
                label.setIcon(whiteQueen);
                int col = (label.getLocation().x - 4)/59;
                int row = (label.getLocation().y - 4)/59;
                displayBoard[row][col].piece = new Queen(0, new int[]{row, col}, false);
            }
        }

        for(Component comp: piecesPanel.getComponents()){
            ((JRadioButton) comp).setVisible(false);
        }
    }//GEN-LAST:event_standardRadioActionPerformed

    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
        // TODO add your handling code here:
        for(Component comp: controlsPanel.getComponents()){
            comp.setVisible(false);
        }
        clearBtn.setVisible(false);
        this.setSize(600, 600);
        forfeitBtn.setVisible(true);

        Piece[][] initBoard = new Piece[8][8];
        ArrayList<Piece> computerPieces = new ArrayList();

        for(int i = 0; i < 8; i++){
            for(int j = 0; j < 8; j++){
                if(displayBoard[i][j].piece != null){
                    displayBoard[i][j].piece.setSquareTableValues();
                    initBoard[i][j] = displayBoard[i][j].piece;

                    if(displayBoard[i][j].piece.getColour() != playerSide){
                        computerPieces.add(displayBoard[i][j].piece);
                    }

                    if(displayBoard[i][j].piece.getColour() == playerSide &&
                        displayBoard[i][j].piece.getPieceName().equals("king")){
                        playerKing = (King)displayBoard[i][j].piece;
                    }
                }
                else initBoard[i][j] = null;
            }
        }

        chessBoard = new Board(initBoard, this);
        if(playerKing == null){
            chessBoard.compWin = true;
            chessBoard.playerWin = false;
            endGame();
            return;
        }

        for(Component comp: boardPanel.getComponents()){
            JLabel label = (JLabel)comp;
            label.removeMouseListener(preSquareClickListener);
            label.addMouseListener(squareClickListener);
        }

        computer = new ComputerAI(this, computerPieces, depthSlider.getValue());
        new Thread(computer).start();
    }//GEN-LAST:event_startBtnActionPerformed

    private void blackRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackRadioActionPerformed
        // TODO add your handling code here:
        if(playerSide == 0){
            for(int i = 0; i < displayBoard.length/2; i++){
                for(int j = 0; j < displayBoard.length; j++){
                    Piece piece1 = displayBoard[i][j].piece;
                    int i2 = 7 - i;
                    int j2 = 7 - j;
                    Piece piece2 = displayBoard[i2][j2].piece;

                    int x = 59 * j + 4;
                    int y = 59 * i + 4;
                    Icon icon1 = ((JLabel)boardPanel.getComponentAt(x, y)).getIcon();
                    int x2 = 59 * j2 + 4;
                    int y2 = 59 * i2 + 4;
                    Icon icon2 = ((JLabel)boardPanel.getComponentAt(x2, y2)).getIcon();

                    if(piece2 != null) piece2.setPos(i, j);
                    displayBoard[i][j].piece = piece2;
                    ((JLabel)boardPanel.getComponentAt(x, y)).setIcon(icon2);

                    if(piece1 != null) piece1.setPos(i2, j2);
                    displayBoard[i2][j2].piece = piece1;
                    ((JLabel)boardPanel.getComponentAt(x2, y2)).setIcon(icon1);
                }
            }
        }

        playerSide = 1;
    }//GEN-LAST:event_blackRadioActionPerformed

    private void whiteRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteRadioActionPerformed
        // TODO add your handling code here:
        if(playerSide == 1){
            for(int i = 0; i < displayBoard.length/2; i++){
                for(int j = 0; j < displayBoard.length; j++){
                    Piece piece1 = displayBoard[i][j].piece;
                    int i2 = 7 - i%8;
                    int j2 = 7 - j%8;
                    Piece piece2 = displayBoard[i2][j2].piece;

                    int x = 59 * j + 4;
                    int y = 59 * i + 4;
                    Icon icon1 = ((JLabel)boardPanel.getComponentAt(x, y)).getIcon();
                    int x2 = 59 * j2 + 4;
                    int y2 = 59 * i2 + 4;
                    Icon icon2 = ((JLabel)boardPanel.getComponentAt(x2, y2)).getIcon();

                    if(piece2 != null) piece2.setPos(i, j);
                    displayBoard[i][j].piece = piece2;
                    ((JLabel)boardPanel.getComponentAt(x, y)).setIcon(icon2);

                    if(piece1 != null) piece1.setPos(i2, j2);
                    displayBoard[i2][j2].piece = piece1;
                    ((JLabel)boardPanel.getComponentAt(x2, y2)).setIcon(icon1);
                }
            }
        }
        playerSide = 0;
    }//GEN-LAST:event_whiteRadioActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);                           
            }
        });        
        
    }
    
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton blackBishopRadio;
    private javax.swing.JRadioButton blackKingRadio;
    private javax.swing.JRadioButton blackKnightRadio;
    private javax.swing.JRadioButton blackPawnRadio;
    private javax.swing.JRadioButton blackQueenRadio;
    private javax.swing.JRadioButton blackRadio;
    private javax.swing.JRadioButton blackRookRadio;
    private javax.swing.JPanel boardPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton clearBtn;
    private javax.swing.JPanel controlsPanel;
    private javax.swing.JRadioButton customRadio;
    private javax.swing.JLabel depthLbl;
    private javax.swing.JSlider depthSlider;
    private javax.swing.JButton forfeitBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel piecesPanel;
    private javax.swing.JRadioButton standardRadio;
    private javax.swing.JButton startBtn;
    private javax.swing.JRadioButton whiteBishopRadio;
    private javax.swing.JRadioButton whiteKingRadio;
    private javax.swing.JRadioButton whiteKnightRadio;
    private javax.swing.JRadioButton whitePawnRadio;
    private javax.swing.JRadioButton whiteQueenRadio;
    private javax.swing.JRadioButton whiteRadio;
    private javax.swing.JRadioButton whiteRookRadio;
    // End of variables declaration//GEN-END:variables
}
